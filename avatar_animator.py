import os
import subprocess
import glob
import sys
from datetime import datetime
from config import OUTPUT_DIR, AVATAR_PATH, SADTALKER_PATH
from utils import get_video_duration

def create_talking_head(audio_path):
    """Create talking head animation using SadTalker"""
    print("\n=== [create_talking_head] START ===")
    
    # Create unique output directory for this session
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    result_dir = os.path.join(OUTPUT_DIR, "sadtalker_results", timestamp)
    os.makedirs(result_dir, exist_ok=True)
    
    SADTALKER_PATH = os.path.join(os.getcwd(), "SadTalker")
    SADTALKER_INFERENCE_PATH = os.path.join(SADTALKER_PATH, "inference.py")

    # Use virtual environment's Python
    python_path = sys.executable

    # Set the source image path
    image_path = AVATAR_PATH
    output_path = result_dir

    # Build the command
    cmd = [
        python_path,
        SADTALKER_INFERENCE_PATH,
        "--driven_audio", audio_path,
        "--source_image", image_path,
        "--result_dir", output_path,
        "--still",
        "--preprocess", "full",
        "--enhancer", "gfpgan",
        "--expression_scale", "1.0"
    ]

    
    print("Creating talking head with SadTalker command:")
    print(" ".join(cmd))
    
    try:
        # Run SadTalker
        subprocess.run(cmd, check=True)
        
        # Find the generated video
        video_files = glob.glob(os.path.join(result_dir, "*", "*.mp4"))
        if not video_files:
            raise FileNotFoundError("No video file generated by SadTalker")
        
        # Return the first found video file
        video_path = video_files[0]
        print(f"✅ Talking head created at: {video_path}")
        return video_path
        
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        print(f"❌ Talking head creation failed: {e}")
        return None

def create_static_avatar_video(audio_path):
    """Fallback: Create static avatar video"""
    output_path = os.path.join(OUTPUT_DIR, "static_avatar.mp4")
    duration = get_video_duration(audio_path)
    
    # Add padding to ensure full coverage
    duration += 0.5
    
    cmd = [
        "ffmpeg",
        '-loop', '1',
        '-i', AVATAR_PATH,
        '-i', audio_path,
        '-t', str(duration),
        '-c:v', 'libx264',
        '-c:a', 'aac',
        '-vf', 'scale=500:500',
        '-shortest',
        '-y', output_path
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print(f"✅ Created static avatar video: {output_path}")
        return output_path
    except Exception as e:
        print(f"❌ Fallback video creation failed: {e}")
        return None